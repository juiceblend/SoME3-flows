from manim import *
from make_network import *
from Deal import *
import numpy as np
from FF import *
from Deck import *

class StepFF(Scene):
    def construct(self):
        inf = float("inf")

        pos = np.array([[-6.5, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 6.5], 
               [0, 3.600000000000001, 3.000000000000001, 2.4000000000000012, 1.8000000000000012, 1.200000000000001, 0.600000000000001, 5.273559366969494e-16, -0.6, -1.2000000000000006, -1.8000000000000012, -2.4000000000000012, -3.000000000000001, -3.600000000000001, 3.600000000000001, 3.000000000000001, 2.4000000000000012, 1.8000000000000012, 1.200000000000001, 0.600000000000001, 5.273559366969494e-16, -0.6, -1.2000000000000006, -1.8000000000000012, -2.4000000000000012, -3.000000000000001, -3.600000000000001, 0], 
               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
        
        adj_mat = np.array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, 0, 0, 0, 0, inf, 0, 0, 0, inf, 0, inf, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, inf, inf, 0, 0, inf, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, inf, 0, 0, 0, 0, inf, 0, inf, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, 0, inf, 0, 0, 0, 0, 0, 0, 0, 0, inf, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, 0, inf, 0, inf, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, 0, 0, 0, 0, 0, inf, inf, inf, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, inf, 0, 0, inf, 0, 0, inf, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, inf, inf, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, 0, 0, 0, inf, inf, inf, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, inf, 0, inf, 0, 0, inf, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, 0, 0, 0, inf, inf, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, 0, 0, 0, 0, inf, inf, 0, 0, inf, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, inf, inf, 0, inf, 0, inf, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
        
        n = 28
        r = 0.2
        show_cap = True

        network = MakeNetwork(n, r, pos, adj_mat)

        Nodes = network.Nodes
        Edges = network.Edges
        edge_endpts = network.edge_endpts

        left_capacity_text = Tex("1")
        center_capacity_text = Tex(r"$\infty$")
        right_capacity_text = Tex("1")
        left_capacity_text.shift(DOWN*2.9 + LEFT * 5.2).scale(0.8)
        center_capacity_text.shift(DOWN*3.8).scale(0.8)
        right_capacity_text.shift(DOWN*2.9 + RIGHT * 5.2).scale(0.8)

        for node in Nodes:
            node[0].scale(0.5)

        self.add(VGroup(Nodes, Edges, left_capacity_text, center_capacity_text,right_capacity_text))
        self.wait(10)

        #t=86
        path1 = [[0,1], [1,15], [15,27]]
        animations_1 = network.AugmentPath(path1, amount=1)
        self.play(*animations_1, run_time=2)
        self.wait(2)
        
        #t=90
        self.play(Indicate(Nodes[1]),run_time=1)
        self.wait(0.5)
        self.play(Indicate(Nodes[15]),run_time=1)
        self.wait(3)

        #t=95.5
        self.play(Wiggle(Edges[edge_endpts.index([0,1])]),run_time=1)
        self.wait(8.5)

        #t=105
        self.play(Wiggle(Edges[edge_endpts.index([15,27])]),run_time=1)
        self.wait(9)

        #t=115
        path2 = [[0,2], [2,14], [14,27]]
        animations_2 = network.AugmentPath(path2, amount=1)
        self.play(*animations_2, run_time=2)
        self.wait(7)

        FF_paths = [[[0, 3], [3, 17], [17, 27]], [[0, 4], [4, 16], [16, 27]], [[0, 5], [5, 19], [19, 27]], [[0, 6], [6, 22], [22, 27]], [[0, 7], [7, 18], [18, 27]], [[0, 8], [8, 21], [21, 27]], [[0, 9], [9, 20], [20, 27]], [[0, 10], [10, 24], [24, 27]], [[0, 11], [11, 25], [25, 27]], [[0, 12], [12, 23], [23, 27]]]

        #t=124
        for path in FF_paths:
          animations_3 = network.AugmentPath(path, amount=1)
          self.play(*animations_3, run_time=0.4)

        self.wait(15)